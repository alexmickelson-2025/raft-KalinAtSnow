@rendermode InteractiveServer
@page "/"
@using Raft

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<button class="btn btn-primary" @onclick="StartSimulation">Start Simulation</button>
<div>

<label>
    multiplier for how long the election timeout is
    <input type="number" @onchange="ElectionTimerUpdated"/>
</label>
</div>

<div>

<label>
    simulated network delay
    <input type="number" @bind="networkDelay" />
    <select>
        @foreach (var node in visualizationNodes)
        {
            <option>@node.innerNode._id</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="() => NetworkDelayUpdated(networkDelay)">Send Delay</button>
</label>
</div>


Welcome to your new app.

<div class="row">
    @foreach (var node in visualizationNodes)
    {
        var timeoutRemaining = node.innerNode.ElectionTimeout;
        var maxIntervalMilliseconds = 300.0;
        var percentageRemaining = (int)(100 * (Math.Abs(timeoutRemaining) / maxIntervalMilliseconds));

        <div class="p-3 col-4">
            <div class="border p-3 rounded-3">
                <div class="d-flex justify-content-between">
                    <h3>
                        Node @node._id
                    </h3>
                </div>
                <div>
                    @node.State
                </div>
                <div>
                    Term @node.Term
                </div>
                <div>
                    Leader is @node.LeaderId
                </div>
                <div>
                    <div class="progress">
                        <div class="progress-bar bg-dark-subtle" role="progressbar"
                             style="width: @(percentageRemaining)%" aria-valuenow="@timeoutRemaining"
                             aria-valuemin="0" aria-valuemax="@maxIntervalMilliseconds">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private Timer? timer;
    bool isRunning;
    List<VisualizationNode>? visualizationNodes = [];
    int electionMultiplier = 1;
    int networkDelay = 0;

    public void ElectionTimerUpdated(ChangeEventArgs e)
    {
        foreach (INode node in visualizationNodes)
        {
            node.electionMultiplier = Convert.ToInt32(e.Value);
        }
    }

    public void NetworkDelayUpdated(int id)
    {
        foreach (INode node in visualizationNodes)
        {
            if (node._id == id)
            {
                node.networkDelay = networkDelay;
            }
        }
    }

    public void StartSimulation()
    {
        var node1 = new Node(1);
        var node2 = new Node(2);
        var node3 = new Node(3);

        var simulation1 = new VisualizationNode(node1);
        var simulation2 = new VisualizationNode(node2);
        var simulation3 = new VisualizationNode(node3);

        node1.nodes = [simulation2, simulation3];
        node2.nodes = [simulation1, simulation3];
        node3.nodes = [simulation1, simulation2];

        visualizationNodes = [simulation1, simulation2, simulation3];

        node1.Start();
        node2.Start();
        node3.Start();

        StateHasChanged();
        timer = new Timer(_ =>
        {
            Console.WriteLine("here");
            InvokeAsync(StateHasChanged);
        }, null, 0, 200);
    }

    public void StopNodes()
    {
        foreach (INode node in visualizationNodes)
        {
            node.running = false;
        }
    }
}